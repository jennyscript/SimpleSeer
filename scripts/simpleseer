#!/usr/bin/env python
import sys
import time
import argparse
import logging.config

import Pyro4

def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(
        title='subcommands',
        description='valid subcommands')
    core = subparsers.add_parser(
        'core', description='Run the core server')
    broker = subparsers.add_parser(
        'broker', description='Run the message broker')
    web = subparsers.add_parser(
        'web', description='Run the web server')
    scrub = subparsers.add_parser(
        'scrub', description='Run the frame scrubber')
    shell = subparsers.add_parser(
        'shell', description='Run the ipython shell')
    notebook = subparsers.add_parser(
        'notebook', description='Run the ipython notebook server')

    parser.add_argument(
        '-l', '--logging', dest='logging', default='logging.ini')
    parser.add_argument(
        '-c', '--config', dest='config', default='default.cfg')
    core.set_defaults(func=run_core)
    broker.set_defaults(func=run_broker)
    web.set_defaults(func=run_web)
    scrub.set_defaults(func=run_scrubber)
    shell.set_defaults(func=run_shell)
    notebook.set_defaults(func=run_notebook)

    args = parser.parse_args()
    logging.config.fileConfig(args.logging)
    from SimpleSeer.Session import Session
    
    session = Session(args.config)
    args.func(session)

def run_core(session):
    from SimpleSeer.SimpleSeer import SimpleSeer

    seer = SimpleSeer()
    Pyro4.Daemon.serveSimple(
        {
            seer: "sightmachine.seer"
            },
        ns=True)

def run_web(session):
    init_gevent_subprocess()
    from SimpleSeer.Web import WebServer, make_app
    web = WebServer(make_app())
    web.run_gevent_server()

def run_broker(session):
    init_gevent_subprocess()
    from SimpleSeer.broker import PubSubBroker
    psb = PubSubBroker(session.pub_uri, session.sub_uri)
    psb.serve_forever()

def run_scrubber(session):
    from SimpleSeer import models as M
    
    log = logging.getLogger(__name__)
    retention = session.retention
    if not retention:
        log.info('No retention policy set, skipping cleanup')
        return
    while retention['interval']:
        q_csr = M.Frame.objects(imgfile__ne = None)
        q_csr = q_csr.order_by('-capturetime')
        q_csr = q_csr.skip(retention['maxframes'])
        for f in q_csr:
            f.imgfile.delete()
            f.imgfile = None
            f.save(False)
        log.info('Purged %d frame files', q_csr.count())
        time.sleep(retention["interval"])

def run_shell(session):
    from IPython.config.loader import Config
    from IPython.frontend.terminal.embed import InteractiveShellEmbed
    from SimpleSeer.service import SeerProxy2
    banner = '''\nRunning the SimpleSeer interactive shell.\n'''
    exit_msg = '\n... [Exiting the SimpleSeer interactive shell] ...\n'
    shell= InteractiveShellEmbed(
        banner1=banner, exit_msg=exit_msg, user_ns={})
    shell.extension_manager.load_extension('SimpleSeer.ipython_extension')
    shell()

def run_notebook(session):
    from IPython.frontend.html.notebook import notebookapp
    from IPython.frontend.html.notebook import kernelmanager

    kernelmanager.MappingKernelManager.first_beat=30.0
    app = notebookapp.NotebookApp.instance()
    app.initialize([
            '--no-browser',
            '--port', '5050',
            '--ext', 'SimpleSeer.ipython_extension'])
    app.start()

def init_gevent_subprocess():
    # Monkey patch socket routines
    from gevent import monkey
    monkey.patch_all()

    # Disable access to the seer object (just in case!)
    from SimpleSeer import SimpleSeer
    SimpleSeer.SimpleSeer = None

if __name__ == '__main__':
   main()

