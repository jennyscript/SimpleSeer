#!/usr/bin/env python
import sys
import time
import logging

import gevent
from gevent import monkey
from multiprocessing import Process

from SimpleSeer.Session import Session
from SimpleSeer import service

def main():
   # Startup auxiliary processes
   Process(target=pubsub_broker).start()
   Process(target=web_server).start()

   compute_server()

def compute_server():
   load_config(sys.argv)
   from SimpleSeer.SimpleSeer import SimpleSeer
   from SimpleSeer.service import SeerService
   from SimpleSeer.Shell import SeerKernel
   seer = SimpleSeer()
   SeerService(seer).start()
   # SeerKernel must run in main thread
   SeerKernel(seer).run()

def web_server():
   load_config(sys.argv)
   init_gevent_subprocess()
   from SimpleSeer.Web import WebServer, make_app
   web = WebServer(make_app())
   web.run_gevent_server()

def pubsub_broker():
   load_config(sys.argv)
   init_gevent_subprocess()
   from SimpleSeer.broker import PubSubBroker
   psb = PubSubBroker(
      Session().pub_uri,
      Session().sub_uri)
   psb.serve_forever()

def ipython_kernel():
   Shell.kernel(self)
   

def load_config(args):
   if (len(args) > 1):
      config_file = args[1]
   else:
      config_file = "../default.cfg"
   Session(config_file)

def init_gevent_subprocess():
   # Monkey patch socket routines
   monkey.patch_all()
   logging.basicConfig(level=logging.DEBUG)
   # Proxy access to the seer object
   from SimpleSeer import SimpleSeer
   SimpleSeer.SimpleSeer = service.SeerClient()

if __name__ == '__main__':
   main()

